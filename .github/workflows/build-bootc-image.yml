name: Build Bootc Kubernetes Control Plane Image

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-bootc-image:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-24.04
            platform: linux/amd64
          - arch: arm64
            runner: ubuntu-24.04-arm
            platform: linux/arm64
            tier2: true
    defaults:
      run:
        shell: bash
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Homebrew for arm64
      if: matrix.tier2
      run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      
    - name: Set up Homebrew
      uses: Homebrew/actions/setup-homebrew@master

    - name: Remove old executables
      run: |
        # Remove the old crun executable to let brew to install a newer one ...
        sudo apt-get remove crun

    - name: Install podman and show dependencies
      run: |
        if [[ "${{ matrix.tier2 }}" == "true" ]]; then
          brew install --build-from-source podman
        else
          brew install podman
        fi
        brew services start podman

    - name: Display versions
      run: |
        podman -v
        crun -v
      
        podman info
        
    - name: Build Container Image
      shell: bash
      run: |
        podman build --platform ${{ matrix.platform }} -t my-k8s-control-plane-${{ matrix.arch }} -f Containerfile .
        podman image save -o my-k8s-control-plane-${{ matrix.arch }}.tar localhost/my-k8s-control-plane-${{ matrix.arch }}:latest
        
    - name: Get Kubelet Version
      id: kubelet-version
      shell: bash
      run: |
        # Extract kubelet version from the built image
        KUBELET_VERSION=$(podman run --rm localhost/my-k8s-control-plane-${{ matrix.arch }}:latest kubelet --version | awk '{print $2}')
        echo "Kubelet version: $KUBELET_VERSION"
        
        # Also set as environment variable for this job
        echo "KUBELET_VERSION=$KUBELET_VERSION" >> $GITHUB_ENV
        
    - name: Prepare Output Directory
      run: |
        rm -rf output/ && mkdir -p output
               
    - name: Build Bootc QCOW2 Image
      run: |
        sudo podman load -i my-k8s-control-plane-${{ matrix.arch }}.tar
        sudo podman run --rm --privileged \
          --pull=newer \
          --security-opt label=type:unconfined_t \
          -v ./config.toml:/config.toml:ro \
          -v ./output:/output \
          -v /var/lib/containers/storage:/var/lib/containers/storage \
          quay.io/centos-bootc/bootc-image-builder:latest \
          --type qcow2 \
          --use-librepo=True \
          --rootfs btrfs \
          localhost/my-k8s-control-plane-${{ matrix.arch }}:latest
          
    - name: List output files
      run: |
        echo "Generated files for ${{ matrix.arch }}:"
        find output/ -type f -ls
        
    - name: Upload Bootc Image Artifact
      uses: actions/upload-artifact@v4
      with:
        name: bootc-k8s-control-plane-qcow2-${{ matrix.arch }}
        path: output/
        retention-days: 30
        
    - name: Login to GitHub Container Registry
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | podman login ghcr.io -u ${{ github.actor }} --password-stdin
        
    - name: Tag and Push Container Image
      run: |
        # Tag the image for GitHub Container Registry with architecture suffix
        podman tag localhost/my-k8s-control-plane-${{ matrix.arch }}:latest ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:latest-${{ matrix.arch }}
        podman tag localhost/my-k8s-control-plane-${{ matrix.arch }}:latest ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:${{ github.sha }}-${{ matrix.arch }}
        podman tag localhost/my-k8s-control-plane-${{ matrix.arch }}:latest ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:"${KUBELET_VERSION}"-${{ matrix.arch }}
        
        # Push all tags
        podman push ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:latest-${{ matrix.arch }}
        podman push ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:${{ github.sha }}-${{ matrix.arch }}
        podman push ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:"${KUBELET_VERSION}"-${{ matrix.arch }}

    - name: Setup tmate session for debugging
      if: failure()
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: true
        timeout-minutes: 30

  create-multiarch-manifest:
    needs: build-bootc-image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Login to GitHub Container Registry
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | podman login ghcr.io -u ${{ github.actor }} --password-stdin
    
    - name: Create and Push Multi-arch Manifest
      run: |
        # Get kubelet version from one of the jobs (they should be the same)
        KUBELET_VERSION=$(podman run --rm ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:latest-amd64 kubelet --version | awk '{print $2}')
        
        # Create multi-arch manifest for latest tag
        podman manifest create ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:latest
        podman manifest add ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:latest ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:latest-amd64
        podman manifest add ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:latest ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:latest-arm64
        podman manifest push ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:latest
        
        # Create multi-arch manifest for commit SHA tag
        podman manifest create ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:${{ github.sha }}
        podman manifest add ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:${{ github.sha }}-amd64
        podman manifest add ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:${{ github.sha }}-arm64
        podman manifest push ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:${{ github.sha }}
        
        # Create multi-arch manifest for kubelet version tag
        podman manifest create ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:$KUBELET_VERSION
        podman manifest add ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:$KUBELET_VERSION ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:$KUBELET_VERSION-amd64
        podman manifest add ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:$KUBELET_VERSION ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:$KUBELET_VERSION-arm64
        podman manifest push ghcr.io/${{ github.repository_owner }}/my-k8s-control-plane:$KUBELET_VERSION
